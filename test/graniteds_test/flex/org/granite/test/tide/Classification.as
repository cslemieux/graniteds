/**
 * Generated by Gas3 v1.1.0 (Granite Data Services) on Sat Jul 26 17:58:20 CEST 2008.
 *
 * WARNING: DO NOT CHANGE THIS FILE. IT MAY BE OVERRIDDEN EACH TIME YOU USE
 * THE GENERATOR. CHANGE INSTEAD THE INHERITED CLASS (Person.as).
 */

package org.granite.test.tide {

    import flash.utils.IDataInput;
    import flash.utils.IDataOutput;
    
    import mx.collections.ListCollectionView;
    
    import org.granite.meta;
    import org.granite.ns.tide;
    import org.granite.tide.IEntityManager;
    import org.granite.tide.IPropertyHolder;

    use namespace meta;
    use namespace tide;

    [Managed]
	[Lazy]
    [RemoteClass(alias="org.granite.test.tide.Classification")]
    public class Classification extends AbstractEntity {

		private var _name:String;
        private var _subclasses:ListCollectionView;
        private var _superclasses:ListCollectionView;
		
		
		public function Classification(id:Number = NaN, version:Number = NaN, uid:String = null):void {
			super(id, version, uid);
		}
        
        
		public function set name(value:String):void {
			_name = value;
		}
		public function get name():String {
			return _name;
		}
		
        public function set subclasses(value:ListCollectionView):void {
            _subclasses = value;
        }
		[Lazy]
        public function get subclasses():ListCollectionView {
            return _subclasses;
        }

		public function set superclasses(value:ListCollectionView):void {
			_superclasses = value;
		}
		[Lazy]
		public function get superclasses():ListCollectionView {
			return _superclasses;
		}
		
        override meta function merge(em:IEntityManager, obj:*):void {
            var src:Classification = Classification(obj);
            super.meta::merge(em, obj);
            if (meta::isInitialized()) {
				em.meta_mergeExternal(src._name, _name, null, this, 'name', function setter(o:*):void{_name = o as String}) as String;
				em.meta_mergeExternal(src._subclasses, _subclasses, null, this, 'subclasses', function setter(o:*):void{_subclasses = o as ListCollectionView}) as ListCollectionView;
				em.meta_mergeExternal(src._superclasses, _superclasses, null, this, 'superclasses', function setter(o:*):void{_superclasses = o as ListCollectionView}) as ListCollectionView;
            }
        }

        override public function readExternal(input:IDataInput):void {
            super.readExternal(input);
            if (meta::isInitialized()) {
				_name = input.readObject() as String;
				_subclasses = input.readObject() as ListCollectionView;
				_superclasses = input.readObject() as ListCollectionView;
            }
        }

        override public function writeExternal(output:IDataOutput):void {
            super.writeExternal(output);
            if (meta::isInitialized()) {
				output.writeObject((_name is IPropertyHolder) ? IPropertyHolder(_name).object : _name);
                output.writeObject((_subclasses is IPropertyHolder) ? IPropertyHolder(_subclasses).object : _subclasses);
                output.writeObject((_superclasses is IPropertyHolder) ? IPropertyHolder(_superclasses).object : _superclasses);
            }
        }
    }
}
