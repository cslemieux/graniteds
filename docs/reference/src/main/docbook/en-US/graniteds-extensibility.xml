<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" []>
   
<chapter id="graniteds.extensibility">
	<title>Extensibilty</title>
	<para>
	</para>
	
	<section id="extensibility.customtypes" condition="flex">
	   <title>Handling custom data types</title>
	   <para>
	   If you need special type conversion support, like Joda time to regular AS3 Date, you may write a custom converter/reverter.
	   </para>
	   
	   <formalpara>
	       <title>A <literal>JodaDateTime2Date</literal> converter/reverter:</title>
	       <para>
	       Here is a complete implementation of a Joda <literal>DateTime</literal> converter/reverter:
	       </para>
	   </formalpara>
	   
	   <programlisting role="JAVA">
<![CDATA[package com.myapp.converters;

import java.lang.reflect.Type;
import java.util.Date;

import org.granite.messaging.amf.io.convert.Converter;
import org.granite.messaging.amf.io.convert.Converters;
import org.granite.messaging.amf.io.convert.Reverter;
import org.granite.util.TypeUtil;

import org.joda.time.DateTime;

public class JodaDateTime2Date extends Converter implements Reverter {

    public JodaDateTime2Date(Converters converters) {
        super(converters);
    }

    // AMF3Deserialization (Converter)...

    @Override
    protected boolean internalCanConvert(Object value, Type targetType) {
        Class<?> targetClass = ClassUtil.classOfType(targetType);
        return (
            targetClass.isAssignableFrom(DateTime.class) &&
            (value == null || value instanceof Date)
        );
    }

    @Override
    protected Object internalConvert(Object value, Type targetType) {
        return (value == null ? null : new DateTime(((Date)value).getTime()));
    }

    // AMF3Serialization (Reverter)...

    public boolean canRevert(Object value) {
        return value instanceof DateTime;
    }

    public Object revert(Object value) {
        return ((DateTime)value).toDate();
    }
}]]>
	   </programlisting>
	   
	   <para>
	   When you send an AS3 <literal>Date</literal> to the server, either as method parameter or as a bean field value, it is deserialized as 
	   <literal>java.util.Date</literal> object and, if your target type is a <literal>org.joda.time.DateTime</literal> instance, it fails to find a matching method, 
	   since it looks for a <literal>java.util.Date</literal> parameter, or to assign the bean value, issuing a <literal>ClassCastException</literal>.
	   </para>
        
       <para>
        Hence, the first purpose of the <literal>JodaDateTime2Date</literal> converter above is to convert <literal>java.util.Date</literal> 
        to <literal>org.joda.time.DateTime</literal> at deserialization time using <literal>internalCanConvert</literal>/<literal>internalConvert</literal> methods.
        </para>
        
        <para>
        <literal>JodaDateTime2Date</literal> converter also implements the <literal>Reverter</literal> interface because Joda time is not a known type, 
        and it must be converted back, or reverted, to a <literal>java.util.Date</literal> instance before AMF3 serialization 
        using <literal>canRevert</literal>/<literal>revert</literal> methods.
        </para>
        
        <formalpara>
            <title>Plug-in your converter</title>
            <para>
            The converter should be setup in <literal>granite-config.xml</literal>
            </para>
        </formalpara>
        
        <programlisting role="XML">
<![CDATA[<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE granite-config PUBLIC
    "-//Granite Data Services//DTD granite-config internal//EN"
    "http://www.graniteds.org/public/dtd/3.0.0/granite-config.dtd">

<granite-config>
  <converters>
    <converter type="com.myapp.converters.JodaDateTime2Date" />
  </converters>
</granite-config>]]>
        </programlisting>
        
        <formalpara>
            <title>Modifying Gas3 in Order to Generate AS3 Date Fields for Joda Date Type</title>
            <para>
            When generating AS3 beans for your Java beans, Gas3 will not be able to know about this new converter, and it will write Joda DateTime 
            fields with a raw <literal>org.joda.time.DateTime</literal> type:
            </para>
        </formalpara>
        
        <programlisting role="AS3">
import org.joda.time.DateTime;

private var myDate:DateTime = null;
        </programlisting>
        
        <para>
        In order to tell the generator to use simple AS3 <literal>Date</literal> type for Joda date, you have to extend the 
        <literal>org.granite.generator.as3.DefaultAs3TypeFactory</literal> class:
        </para>
        
        <programlisting role="JAVA">
<![CDATA[package com.myapp.converters;

import org.granite.generator.as3.As3Type;
import org.granite.generator.as3.DefaultAs3TypeFactory;

import org.joda.time.DateTime;

public class CustomAs3TypeFactory extends DefaultAs3TypeFactory {

    @Override
    protected As3Type createAs3Type(Class<?> jType) {
        if (DataTime.class.isAssignableFrom(jType))
            return As3Type.DATE;
        return super.createAs3Type(jType);
    }
}]]>    
        </programlisting>

        <para>
        Then, declare this new factory in the Gas3 task (here for example in an Ant build file):
        </para>
        
        <programlisting role="XML">
<![CDATA[<gas3 as3typefactory="com.myapp.converters.CustomAs3TypeFactory" ...>
    ...
    <classpath>
        ...
        <pathelement location="path/to/my/factory"/>
    </classpath>
    ...
</gas3>]]>
        </programlisting>
        
        <para>
        When using the GraniteDS Eclipse Builder, you may declare it in the <emphasis>Options</emphasis> panel 
        and add your class in the <literal>Classpath</literal> panel.
        </para>
	</section>
            
    <section id="extensibility.security">
        <title>Writing a security service</title>
        <para>
        GraniteDS implements security based on the following <literal>SecurityService</literal> interface. 
        Note that the term <literal>Service</literal> in <literal>SecurityService</literal> has nothing to do with a true Flex destination, since security services 
        are not exposed to outside calls:
        </para>

        <programlisting role="JAVA">
<![CDATA[package org.granite.messaging.service.security;

import java.util.Map;

public interface SecurityService {

    public void configure(Map<String, String> params);

    public void login(Object credentials) throws SecurityServiceException;

    public void login(Object credentials, String charset) throws SecurityServiceException;

    public Object authorize(AbstractSecurityContext context) throws Exception;

    public void logout() throws SecurityServiceException;
    
    public void handleSecurityException(SecurityServiceException e);
}]]>
           </programlisting>
           
           <para>
           An implementation of this interface must be thread safe, i.e., only one instance of this service is used in the entire web-app 
           and will be called by concurrent threads.
           </para>
   
           <para>
           <itemizedlist>
               <listitem><para>
               <literal>configure</literal>: This method is called at startup time and gives a chance to pass parameters to the security service.
               </para></listitem>
               <listitem><para>
               <literal>login</literal>: This method is called when you call one of the <literal>setCredentials</literal> or <literal>setRemoteCredentials</literal> 
               <literal>RemoteObject</literal>'s method. Note that these method calls do not fire any request by themselves but only pass credentials on 
               the next destination service method call. The <literal>login</literal> method is responsible for creating and exposing a <literal>java.security.Principal</literal> 
               or throwing an appropriate <literal>org.granite.messaging.service.security.SecurityServiceException</literal> if credentials are invalid. 
               Note that credentials are a Base64 string with the common <literal>"username:password"</literal> format. An additional login
               method with an extra <literal>charset</literal> parameter is available, so you can use the <literal>RemoteObject.setCredentials(user, pass, charset)</literal>
               method and specify the charset used in the username/password string (default is ISO-8859-1).
               </para></listitem>
               <listitem><para>
               <literal>authorize</literal>: This method is called upon each and every service method call invocations (<literal>RemoteObject</literal>) 
               or subscribe/publish actions (<literal>Consumer</literal>/<literal>Producer</literal>). When used with <literal>RemoteObject</literal>s, 
               the <literal>authorize</literal> method is responsible for checking security, calling the service method, and returning the corresponding result. 
               When used with <literal>Consumer</literal>s/<literal>Producer</literal>s, it is simply responsible for checking security; 
               no service method invocation, no result. 
               If authorization fails, either because the user is not logged in or because it doesn't have required rights, it must throw an appropriate 
               <literal>org.granite.messaging.service.security.SecurityServiceException</literal>.
               </para></listitem>
               <listitem><para>
               <literal>logout</literal>: This method is called when you call the <literal>RemoteObject</literal>'s <literal>logout</literal> method. 
               Note that the <literal>RemoteObject.logout</literal> method fires a remote request by itself.
               </para></listitem>
               <listitem><para>
               <literal>handleSecurityException</literal>: This method is called whenever a <literal>SecurityServiceException</literal> is thrown by 
               a login or logout operation. The default implementation of this method in <literal>AbstractSecurityService</literal> is to do nothing, 
               but you may add extra care for these security exceptions if you need so.
               </para></listitem>
           </itemizedlist>
         </para>
     </section>
	
	<section id="extensibility.exceptionhandlers">
	   <title>Custom exception handlers</title>
	   <para>
	   The default exception handling mechanism of GraniteDS already provides a lot of flexibility with exception converters that can transform the exceptions
	   caught on the server to meaningful errors on the Flex side. However if you need even more flexibility, you can completely replace the handling mechanism
	   and provide you own exception handler. This is however not recommended with Tide as some features rely on proper exception conversions to work, but in this case
	   you can simply extend the <literal>ExtendedExceptionHandler</literal> and add you custom behaviour. 
	   </para>
	   <para>
       If you need special service exception handling, either to add extra informations or to mask implementation details, you may configure a 
       custom implementation of <literal>ServiceExceptionHandler</literal> in <literal>services-config.xml</literal>:
        </para>
        <programlisting role="XML">
<![CDATA[<?xml version="1.0" encoding="UTF-8"?>

<services-config>
  ...
  <factories>
    <factory id="..." class="...">
      <properties>
        <service-exception-handler>
          path.to.my.CustomServiceExceptionHandler
        </service-exception-handler>
        ...
      </properties>
    </factory>
  </factories>
  ...
</services-config>]]>
        </programlisting>
        <para>
        Your custom service exception handler must implement the <literal>org.granite.messaging.service.ServiceExceptionHandler</literal> interface. 
        Note that it can of course extend the <literal>org.granite.messaging.service.DefaultServiceExceptionHandler</literal> class:
        </para>
        <programlisting role="JAVA">
public ServiceException handleNoSuchMethodException(
    Message request,
    Destination destination,
    Object invokee,
    String method,
    Object[] args,
    NoSuchMethodException e
);

public ServiceException handleInvocationException(
    ServiceInvocationContext context,
    Throwable t
);
        </programlisting>
        <para>
        The first method is called whenever the service invoker cannot find any suitable method with the supplied name and arguments.
        </para>
        <para>
        The second one is called whenever the method invocation throws an exception. Note that <literal>java.lang.reflect.InvocationTargetException</literal> are 
        unwrapped (<literal>getTargetException</literal>) before <literal>handleInvocationException</literal> is called.
        </para>
        <para>
        In both cases, the returned <literal>ServiceException</literal> will be thrown and serialized in a Flex <literal>ErrorMessage</literal> instead of the raw 
        <literal>NoSuchMethodException e</literal> or <literal>Throwable t</literal> one.
        </para>
	</section>
	
	<section id="extensibility.messageinterceptor">
	   <title>Server message interceptors</title>
	   <para>
	   If you need to do some actions before and after each remote call, such as setting or accessing message headers, or doing some setup before request handling, 
	   you can configure a custom <literal>AMF3MessageInterceptor</literal> in <literal>granite-config.xml</literal> :
	   </para>
        
        <programlisting role="XML">
<![CDATA[<?xml version="1.0" encoding="UTF-8"?>

<granite-config>
   ...
   <amf3-message-interceptor type="com.myapp.MyMessageInterceptor"/>
</granite-config>]]>
        </programlisting>
        
        <para>
        When using configuration scanning, you can also put this in <literal>META-INF/granite-config.properties</literal> of your application jar archive :
        </para>
        
        <programlisting role="XML">
<![CDATA[amf3MessageInterceptor=com.myapp.MyMessageInterceptor]]>
        </programlisting>
        
        <para>
        When using Spring or CDI, you will just have to declare a bean implementing <literal>AMF3MessageInterceptor</literal> in the framework context (with CDI, that
        just means adding an implementation in the application archive).
        </para>
        
        <para>
        Take care that some of the GraniteDS server frameworks integrations (CDI and Seam) already provide their own message interceptors. If you need to do something else, 
        you will have to override the existing interceptor and call <literal>super.before</literal> and <literal>super.after</literal>.
        </para>
    </section>
    
    <section id="extensibility.classdescriptors" condition="flex">
        <title>Custom Java or ActionScript3 Class Descriptors</title>
        <para>
        When a Java object is not <literal>Externalizable</literal> nor externalized by a GDS externalizer, it is serialized by means of the 
        <literal>org.granite.messaging.amf.io.util.DefaultJavaClassDescriptor</literal>. This class controls which fields must be serialized and how to retrieve 
        values from those fields.
        </para>
        <para>
        In similar situations, but at deserialization time, the <literal>org.granite.messaging.amf.io.util.DefaultActionScriptClassDescriptor</literal> class controls 
        how the corresponding Java object is instantiated and how values are set in this new instance.
        </para>
        <para>
        You may write and plugin your own Java or ActionScript3 descriptors, for example:
        </para>
        <programlisting role="JAVA">
<![CDATA[public class MyJavaClassDescriptor
    extends org.granite.messaging.amf.io.util.JavaClassDescriptor {

    public MyJavaClassDescriptor(Class type) {
        super(type);
    }

    @Override
    protected List<Property> introspectProperties() {
        // put your custom code here...
    }
}]]>
        </programlisting>
        <programlisting role="JAVA">
<![CDATA[public class MyAS3ClassDescriptor
    extends org.granite.messaging.amf.io.util.ActionScriptClassDescriptor {

    public MyAS3ClassDescriptor(String type, byte encoding) {
        super(type, encoding);
    }

    @Override
    public void defineProperty(String name) {
        // put your custom code here...
    }

    @Override
    public Object newJavaInstance() {
        // put your custom code here...
    }
}]]>
        </programlisting>
        <para>
        Then, you have to declare these descriptors in your <literal>granite-config.xml</literal>:
        </para>
        <programlisting role="XML">
<![CDATA[<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE granite-config PUBLIC
    "-//Granite Data Services//DTD granite-config internal//EN"
    "http://www.graniteds.org/public/dtd/3.0.0/granite-config.dtd">

<granite-config>
    <descriptors>
        <descriptor
            type="path.to.MyClass"
            java="path.to.MyJavaClassDescriptor"
            as3="path.to.MyAS3ClassDescriptor" />
        <descriptor
            instance-of="path.to.MyBaseClass"
            java="path.to.MyJavaClassDescriptor"
            as3="path.to.MyAS3ClassDescriptor" />
        <!-- other descriptor configuration... -->
    </descriptors>
</granite-config>]]>
        </programlisting>
        <para>
        You must use only one of <literal>type</literal> or <literal>instance-of</literal> attributes (i.e., should my descriptor(s) be used for all 
        <literal>path.to.MyClass</literal> objects, or for all instances of <literal>path.to.MyBaseClass</literal>), you may use one of, or both, Java or AS3 attributes.
        </para>
    </section>
    
    <section id="extensibility.customser">
        <title>Custom AMF3 (De)Serializers (Advanced use only)</title>
        <para>
        You may plug your own AMF3 serializer/deserializer.
        A custom AMF3 serializer must implement <literal>java.io.ObjectOutput</literal> and have a special constructor signature:
        </para>
        <programlisting role="JAVA">
<![CDATA[public class MyAMF3Serializer implements java.io.ObjectOutput {

    public MyAMF3Serializer(java.io.OutputStream out) {
        // ...
    }

    // ObjectOutput implemention...
}]]>
        </programlisting>
        <para>
        Then, you must register this serializer in <literal>granite-config.xml</literal>:
        </para>
        <programlisting role="XML">
<![CDATA[<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE granite-config PUBLIC
    "-//Granite Data Services//DTD granite-config internal//EN"
    "http://www.graniteds.org/public/dtd/3.0.0/granite-config.dtd">

<granite-config>
    <amf3-serializer type="path.to.MyAMF3Serializer"/>
</granite-config>]]>
        </programlisting>
        <para>
        A custom AMF3 deserializer must implement <literal>java.io.ObjectInput</literal> and have a special constructor signature:
        </para>
        <programlisting role="JAVA">
<![CDATA[public class MyAMF3Deserializer implements java.io.ObjectInput {

    public MyAMF3Deserializer(java.io.InputStream in) {
        // ...
    }

    // ObjectInput implemention...
}]]>
        </programlisting>
        <para>
        Then, you have to register this deserializer in <literal>granite-config.xml</literal>:
        </para>
        <programlisting role="XML">
<![CDATA[<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE granite-config PUBLIC
    "-//Granite Data Services//DTD granite-config internal//EN"
    "http://www.graniteds.org/public/dtd/3.0.0/granite-config.dtd">

<granite-config>
    <amf3-deserializer type="path.to.MyAMF3Deserializer"/>
</granite-config>]]>
        </programlisting>
        <para>
        You may of course extend <literal>org.granite.messaging.amf.io.AMF3Serializer</literal> or <literal>org.granite.messaging.amf.io.AMF3Deserializer</literal> 
        to override only some parts of the default AMF3 (de)serialization process, as all methods in thoses classes are public or protected.
        </para>
    </section>
    
    <section id="extensibility.invocationlisteners">
        <title>ServiceInvocationListener (Advanced use only)</title>
        <para>
        If you need to listen to each service invocation method call, you may plugin a <literal>org.granite.messaging.service.ServiceInvocationListener</literal> 
        implementation like this:
        </para>
        <programlisting role="XML">
<![CDATA[<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE granite-config PUBLIC
    "-//Granite Data Services//DTD granite-config internal//EN"
    "http://www.graniteds.org/public/dtd/3.0.0/granite-config.dtd">

<granite-config>
    <invocation-listener type="path.to.MyServiceInvocationListener"/>
</granite-config>]]>
        </programlisting>
        <para>
        Your class must implement the <literal>org.granite.messaging.service.ServiceInvocationListener</literal> interface containing the following methods:
        </para>
        <programlisting role="JAVA">
public Object[] beforeMethodSearch(Object invokee, String methodName, Object[] args);
public void beforeInvocation(ServiceInvocationContext context);
public void afterInvocationError(ServiceInvocationContext context, Throwable t);
public Object afterInvocation(ServiceInvocationContext context, Object result);
        </programlisting>
        <warning><para>
        Be very careful with those listeners as you may break the entire invocation process if you do not return proper args (<literal>beforeMethodSearch</literal>), 
        if you modify the <literal>ServiceInvocationContext</literal> (<literal>beforeInvocation</literal>) or if you return a different object than the service 
        method call result (<literal>afterInvocation</literal>)!
        </para></warning>
    </section>
</chapter>
