<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" []>
   
<chapter id="graniteds.gettingstarted">
	<title>Getting Started</title>
	<para>
	This section introduces:
    <itemizedlist>
        <listitem><para>
        GraniteDS software requirements.
        </para></listitem>
        <listitem condition="flex"><para>
        Various example projects using the different kind of services (POJO, EJB 3, Seam, Spring, and Guice) that may help you in choosing the right technology 
        and starting a Flex/GDS project.
        </para></listitem>
        <listitem condition="flex"><para>
        The complete setup of a basic "Hello, world" GDS project using Flex 3 SDK, Eclipse, and Tomcat.
        </para></listitem>
        <listitem condition="java"><para>
        The complete setup of a basic "Hello, world" GDS project using Java, Eclipse, and Tomcat.
        </para></listitem>
        <listitem condition="flex"><para>
        A modification of the sample "Hello, world" project in order to demonstrate basic GDS support of Hibernate with the help of Eclipse plugins.
        </para></listitem>
    </itemizedlist>
	</para>
	
	<section id="gettingstarted.requirements">
        <title>Requirements (Free Tools)</title>
        <para>
        You need at least the following four free development tools:
        <itemizedlist>
            <listitem><para>
            <emphasis>Java 6+</emphasis> (5+ supported): <ulink url="http://java.sun.com/javase/downloads/index.jsp">Download Sun JDK</ulink> and install it.
            </para></listitem>
            <listitem><para>
            <emphasis>Eclipse 3.2+</emphasis>: <ulink url="http://www.eclipse.org/downloads/">Download Eclipse 3.2+</ulink> and unzip it somewhere (NOTE: It is always a good idea 
            to avoid paths with whitespace). You may, of course, use another IDE, but you will not be able to use Eclipse specific plugins and example projects.
            </para></listitem>
            <listitem condition="flex"><para>
            <emphasis>Flex 4.1 SDK</emphasis> (3+ supported): Download <ulink url="http://opensource.adobe.com/wiki/display/flexsdk/Download+Flex+4">Flex 4.1 SDK</ulink> 
            and unzip it somewhere (NOTE: idem), say <literal>/flex_sdk_4</literal>.
            </para></listitem>
        </itemizedlist>
        </para>
        <para condition="flex">
        You may also read and follow the recommendations in this 
        <ulink url="http://blog.brokenfunction.com/2007/01/29/how-to-develop-for-flash-on-any-os-for-free/">excellent article</ulink> in order to customize 
        your development environment.
        </para>
    </section>
    
    <!--section id="gettingstarted.examples" condition="flex">
        <title>Example projects</title>
        <para>
        Installing and testing GraniteDS sample application is a quick process, provided that you have downloaded 
        <ulink url="http://www.eclipse.org/downloads/">Eclipse 3.4+</ulink>, <ulink url="http://www.jboss.org/jbossas/downloads/">JBoss 4.2.3+</ulink> 
        and <ulink url="http://opensource.adobe.com/wiki/display/flexsdk/Download+Flex+4">Flex 4.1 SDK</ulink>.
        </para>
        <para>
        Let's say you have installed a vanilla JBoss 4.2.3.GA and fresh Flex SDK at the root of your main drive (<literal>C:\jboss-4.2.3.GA</literal> and 
        <literal>C:\flex_sdk_4_1</literal> on Windows).
        </para>
        <para>
        Follow these few steps:
        <orderedlist>
            <listitem><para>
            Download <ulink url="http://www.graniteds.org/confluence/display/DOWNLOAD">graniteds-dist-***.zip</ulink> and save it somewhere.
            </para></listitem>
            <listitem><para>
            Start Eclipse, right click in your "Package Explorer", choose <emphasis>Import... -> General/Existing Project into Workspace -> Next</emphasis>, 
            select the <emphasis>Select archive</emphasis> file option, browse to <literal>graniteds-***.zip</literal>.
            </para></listitem>
            <listitem><para>
            You should now see the main <literal>"graniteds"</literal> project as well as all example projects ready to be imported. When you have made 
            your choice, choose <emphasis>Finish</emphasis>. NOTE: you <emphasis>must</emphasis> import the core graniteds project (it contains the libraries 
            required by the example projects).
            </para></listitem>
            <listitem><para>
            Read the <literal>graniteds/examples/README.txt</literal> file in order to setup your environment.
            </para></listitem>
            <listitem><para>
            For each imported example, open the corresponding <literal>build.xml</literal> file and run the <emphasis>"deploy"</emphasis> target.
            </para></listitem>
            <listitem><para>
            Start JBoss and point your browser to the URL for the example (for example <literal>http://localhost:8080/graniteds_pojo</literal>) 
            (see the <literal>README.txt</literal> file again).
            </para></listitem>
        </orderedlist>
        You may now look at the code of each example and understand how each sample works.
        </para>
    </section-->
    
    <section id="gettingstarted.helloworld.flex" condition="flex">
        <title>Hello World, POJO</title>
        <para>
        This section will guide you through the setting up of a very basic GraniteDS project deployed in Tomcat. Expected result is a typical 
        "Hello, world" application as shown below:
        <imagedata align="center" fileref="images/helloworld.jpg"/>
        </para>
        <para>
        When you type a name in the text field and click <emphasis>Say Hello</emphasis>, a request is sent to a POJO service that replies with a 
        string made by this concatenation:
        </para>
        <programlisting role="JAVA">
<![CDATA["Hello " + <typed name> + "!"]]>
        </programlisting>
        <para>
        The result is then displayed in white under the "Hello World Sample" panel.
        </para>
        <para>
        You may download this example project 
        <ulink url="http://www.graniteds.org/confluence/download/attachments/16875661/helloworld.zip?version=1&amp;modificationDate=1245921645000">here</ulink> 
        if you don't want to copy-paste the code in the following sections below.
        </para>
        <para>
        In order to create, build, and deploy this sample application you need these free tools:
        <itemizedlist>
            <listitem><para>
            <emphasis>Java 5+</emphasis> (6+ working): Download <ulink url="http://java.sun.com/javase/downloads/index.jsp">Sun JDK</ulink> and install it.
            </para></listitem>
            <listitem><para>
            <emphasis>Eclipse 3.5+</emphasis>: Download <ulink url="http://www.eclipse.org/downloads/">Eclipse</ulink> and unzip it somewhere.            
            </para></listitem>
            <listitem><para>
            <emphasis>Flex 4.6 SDK</emphasis>: Download <ulink url="http://www.adobe.com/devnet/flex/flex-sdk-download.html">Flex 4.6 SDK</ulink> and unzip it somewhere. 
            For example, <literal>/flex_4_6_sdk</literal> (for Windows users: <literal>C:\flex_4_6_sdk</literal>).            
            </para></listitem>
            <listitem><para>
            <emphasis>Tomcat 7+</emphasis>: Download <ulink url="http://tomcat.apache.org/download-70.cgi">Tomcat</ulink> and unzip it somewhere. For example, 
            <literal>/apache-tomcat-7.0.29</literal> (for Windows users: <literal>C:\apache-tomcat-7.0.29</literal>).
            </para></listitem>
            <listitem><para>
            <emphasis>granite.jar</emphasis>: You may take it from any of the GraniteDS sample applications or from GraniteDS source distribution in the 
            <literal>build</literal> folder. Download it <ulink url="http://www.graniteds.org/confluence/display/DOWNLOAD">here</ulink>.            
            </para></listitem>
        </itemizedlist>
        </para>
        <para>
        Creation of the project in Eclipse:
        </para>
        <para>
        Start Eclipse and create a new Java project named <literal>helloworld</literal>. You may just type in <literal>helloworld</literal> for 
        <literal>Project name</literal> and accept all other default settings. 
        </para>
        <para>
        Because we are going to have two types of sources, Java and Flex MXML, it is 
        better to rename the default Java source folder <literal>src</literal> to <literal>java</literal>. You can do this by right-clicking on the 
        <literal>src</literal> source folder and selecting <emphasis>Refactor / Rename</emphasis>.
        </para>
        <para>
        We are now going to create a new POJO service named <literal>HelloWorldService</literal>. Right-click on the <literal>java</literal> source folder 
        and select <emphasis>New / Class</emphasis>, enter <literal>org.test</literal> for <literal>Package</literal> and <literal>HelloWorldService</literal> 
        for <literal>Name</literal> in the following dialog, and then click on the <emphasis>Finish</emphasis> button. In the Java source file editor, modify 
        the code so it is just as follows:
        </para>
        <programlisting role="JAVA">
package org.test;

public class HelloWorldService {

    public String sayHello(String name) {
        return "Hello " + name + "!";
    }
}
        </programlisting>
        <para>
        You should now see something like the following picture under Eclipse:
        <imagedata align="center" fileref="images/hwservice.jpg"/>
        </para>
        
        <para>
        Now let create the Flex client code. Create a new folder named <literal>flex</literal> by right-clicking on the <literal>helloworld</literal> project 
        and selecting <emphasis>New / Folder</emphasis>. Create a new file directly in this new folder and name it <literal>HelloWorld.mxml</literal> 
        by right-clicking on the <literal>flex</literal> folder and selecting <emphasis>New / File</emphasis>. In the file editor, which may be Flah Builder 
        or a simple text editor depending on your Eclipse installation, type in the following code:
        </para>
        <programlisting role="AS3">
<![CDATA[<?xml version="1.0" encoding="utf-8"?>
<mx:Application
    xmlns:mx="http://www.adobe.com/2006/mxml"
    backgroundGradientColors="[#0e2e7d, #6479ab]"
    layout="vertical"
    verticalAlign="middle">

    <mx:Style>
        .Panel {
            padding-left: 8px; padding-top: 8px;
            padding-right: 8px; padding-bottom: 8px;
        }
        .Result { font-size: 26px; color: white; }
    </mx:Style>

    <mx:RemoteObject id="srv" destination="helloWorldService" />

    <mx:Panel styleName="Panel" title="Hello World Sample">
        <mx:Label text="Enter your name:"/>
        <mx:TextInput id="nameInput" />
        <mx:Button label="Say Hello" click="srv.sayHello(nameInput.text)"/>
    </mx:Panel>
        
    <mx:Label styleName="Result" text="{srv.sayHello.lastResult}"/>

</mx:Application>]]>
        </programlisting>
        <para>
        You should now see something like the following picture under Eclipse:
        <imagedata align="center" fileref="images/hwclient.jpg"/>
        </para>

        <para>
        Now we have to create the two main GraniteDS configuration files <literal>services-config.xml</literal> and <literal>web.xml</literal> at the root of the
        project. You should now see:
        <imagedata align="center" fileref="images/config.jpg"/> 
        </para>
        <para>
        Copy and paste the following code into these files:
        </para>
        <programlisting role="XML">
<![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<services-config>

    <services>
        <service
            id="granite-service"
            class="flex.messaging.services.RemotingService"
            messageTypes="flex.messaging.messages.RemotingMessage">
            <destination id="helloWorldService">
                <channels>
                    <channel ref="my-graniteamf"/>
                </channels>
                <properties>
                    <scope>application</scope>
                    <source>org.test.HelloWorldService</source>
                </properties>
            </destination>
        </service>
    </services>

    <channels>
        <channel-definition id="my-graniteamf" class="mx.messaging.channels.AMFChannel">
            <endpoint
                uri="http://{server.name}:{server.port}/{context.root}/graniteamf/amf"
                class="flex.messaging.endpoints.AMFEndpoint"/>
        </channel-definition>
    </channels>
</services-config>]]>
        </programlisting>
        <programlisting role="XML">
<![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.4" xmlns="http://java.sun.com/xml/ns/j2ee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee
                        http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">

    <!-- general information about this web application -->
    <display-name>Hello World</display-name>
    <description>Hello World Sample Application</description>

    <!-- read services-config.xml file at web application startup -->
    <listener>
        <listener-class>org.granite.config.GraniteConfigListener</listener-class>
    </listener>

    <!-- handle AMF requests ([de]serialization) -->
    <filter>
        <filter-name>AMFMessageFilter</filter-name>
        <filter-class>org.granite.messaging.webapp.AMFMessageFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>AMFMessageFilter</filter-name>
        <url-pattern>/graniteamf/*</url-pattern>
    </filter-mapping>

    <!-- handle AMF requests (execution) -->
    <servlet>
        <servlet-name>AMFMessageServlet</servlet-name>
        <servlet-class>org.granite.messaging.webapp.AMFMessageServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>AMFMessageServlet</servlet-name>
        <url-pattern>/graniteamf/*</url-pattern>
    </servlet-mapping>

    <!-- default content for helloworld application -->
    <welcome-file-list>
        <welcome-file>HelloWorld.swf</welcome-file>
    </welcome-file-list>

</web-app>]]>
        </programlisting>
        <para>
        Put together, those four files (<literal>HelloWorldService.java</literal>, <literal>HelloWorld.mxml</literal>, <literal>services-config.xml</literal>, 
        and <literal>web.xml</literal>), define an entire Flex/GraniteDS application. Here are some highlights (partial/pseudo code):
        </para>
        <programlisting role="JAVA">
public String HelloWorldService.sayHello(String name)
        </programlisting>
        <programlisting role="XML">
<![CDATA[<mx:RemoteObject id="srv" destination="helloWorldService" />
<mx:Button label="Say Hello" click="srv.sayHello(nameInput.text)"/>
<mx:Label ... text="{srv.sayHello.lastResult}"/>]]>
        </programlisting>
        <programlisting role="XML">
<![CDATA[<destination id="helloWorldService">
    <channel ref="my-graniteamf"/>
    <scope>application</scope>
    <source>org.test.HelloWorldService</source>
</destination>
<channel-definition id="my-graniteamf" ...>
    <endpoint uri="http://{server.name}:{server.port}/{context.root}/graniteamf/amf" .../>
</channel-definition>
<url-pattern>/graniteamf/*</url-pattern>]]>
        </programlisting>
        <para>
        From top to bottom:
        <itemizedlist>
            <listitem><para>
            The <literal>HelloWorldService</literal> Java class declares a method <literal>sayHello()</literal> that takes a <literal>String</literal> argument 
            and returns another <literal>String</literal>.
            </para></listitem>
            <listitem><para>
            The <literal>HelloWorld.mxml</literal> Flex application declares a <literal>RemoteObject</literal> named <literal>srv</literal> and maps it to a 
            destination named <literal>helloWorldService</literal>.
            </para></listitem>
            <listitem><para>
            When you click on the <emphasis>Say Hello</emphasis> button, the <literal>RemoteObject</literal> triggers a server request that will call a 
            <literal>sayHello()</literal> method with the text typed in the <literal>TextInput</literal> named <literal>nameInput</literal> as argument: 
            <literal>srv.sayHello(nameInput.text)</literal>.
            </para></listitem>
            <listitem><para>
            The result of this call will be displayed, when available, in a <literal>Label</literal> by binding the text of this component to the 
            property <literal>srv.sayHello.lastResult</literal> that contains the last received value for this method call.
            </para></listitem>
            <listitem><para>
            The <literal>helloWorldService</literal> destination is declared in <literal>services-config.xml</literal> and uses a channel named 
            <literal>my-graniteamf</literal>. The Java class (source) used as a service for this destination call is <literal>org.test.HelloWorldService</literal> 
            and its scope is <literal>application</literal>. The Java class will be created when the service is first accessed, and this same and unique 
            instance will be used for all subsequent calls; other possible values are <literal>request</literal> and <literal>session</literal>.
            </para></listitem>
            <listitem><para>
            The channel named <literal>my-graniteamf</literal>, used by the <literal>helloWorldService</literal> destination, declares an endpoint whose 
            URL will be resolved to <literal>http://localhost:8080/helloworld/graniteamf/amf</literal> for a local call; it could also be resolved, for example, 
            to <literal>http://www.helloworld.com:80/helloworld/graniteamf/amf</literal> for remote calls.
            </para></listitem>
            <listitem><para>
            <literal>AMFMessageFilter</literal> and <literal>AMFMessageServlet</literal> are both mapped in <literal>web.xml</literal> to the same URL-pattern 
            <literal>/graniteamf/*</literal>. Inside the <literal>helloworld</literal> web application, all requests that match this pattern will be go through 
            this filter and this servlet such as <literal>http://localhost:8080/helloworld/graniteamf/amf</literal>.
            </para></listitem>
        </itemizedlist>
        </para>
        <para>
        Here is basic flow chart that summarizes the expected communication between the Flex client application and the Java server:
        <imagedata align="center" fileref="images/flow.jpg"/>
        </para>
        
        <para>
        The last thing to do is to build and deploy the application.
        </para>
        <para>
        First we have to add the <literal>granite.jar</literal> library and create a build file, here using Ant.
        </para>
        <para>
        Create a new folder named <literal>lib</literal> at the root of the project and put <literal>granite.jar</literal> into this new folder. Create a new 
        file named <literal>build.xml</literal> at the root of the project. Copy and paste the following content into it; you may have to modify 
        the properties <literal>FLEX_HOME</literal> and <literal>TOMCAT_HOME</literal> to reflect your environment:
        </para>
        <programlisting role="XML">
<![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<project name="hello-world" default="deploy">

    <!-- Modify FLEX_HOME/TOMCAT_HOME properties to reflect your environment -->
    <property name="FLEX_HOME" value="/flex_sdk_3"/>
    <property name="TOMCAT_HOME" value="/apache-tomcat-6.0.18"/>
    
    <!-- Declare Flex Ant tasks (such as mxmlc used below) -->
    <taskdef resource="flexTasks.tasks" classpath="${FLEX_HOME}/ant/lib/flexTasks.jar" />

    <!-- Compile MXML source code to SWF -->
    <target name="mxmlc">
        <mxmlc
            file="flex/HelloWorld.mxml"
            output="build/HelloWorld.swf"
            services="services-config.xml"
            context-root="helloworld">
        </mxmlc>
    </target>

    <!-- Build a war suitable for Tomcat (and other) -->
    <target name="war" depends="mxmlc">
        <mkdir dir="build"/>
        <war destfile="build/helloworld.war" webxml="web.xml">
            <zipfileset file="services-config.xml" prefix="WEB-INF/flex" />
            <fileset dir="build" includes="*.swf"/>
            <lib dir="lib"/>
            <classes dir="bin"/>
        </war>
    </target>

    <!-- Deploy the war in Tomcat -->
    <target name="deploy" depends="war">
        <copy todir="${TOMCAT_HOME}/webapps" file="build/helloworld.war"/>
    </target>

</project>]]>
        </programlisting>
        <para>
        You should see something like the following picture:
        <imagedata align="center" fileref="images/build.jpg"/>
        </para>
        <para>
        You may now right-click on the <literal>build.xml</literal> file and select <emphasis>Run As / Ant Build</emphasis>. This will launch the build process, 
        compile the MXML code to an SWF, create a WAR (Web Archive), and copy it into your Tomcat <literal>webapps</literal> directory.
        </para>
        
        <para>
        Finally start Tomcat and test the application.
        To start Tomcat, go to the directory <literal>bin</literal> just under your Tomcat installation directory, <literal>/apache-tomcat-6.0.18/bin</literal> 
        for example, and double-click on <literal>startup.bat</literal>, or <literal>startup.sh</literal> for Unix/Mac users. After a short while, you should 
        see in the console that Tomcat has started. You may now point your Web browser to 
        <ulink url="http://localhost:8080/helloworld/"><literal>http://localhost:8080/helloworld/</literal></ulink>.
        </para>
        <para>
        The Flex example application should appear and you may start playing with "Hello, world" ... a fascinating game.
        </para>
    </section>
    
    <section id="gettingstarted.helloworld.java" condition="java">
        <title>Hello World, POJO</title>
        <para>
        This section will guide you through the setting up of a very basic GraniteDS project deployed in Tomcat and a Java command line client. 
        Expected result is a typical "Hello, world" application.
        </para>
        <para>
        The client program will pass its argument to the remote service and display the result which should be a string:
        </para>
        <programlisting role="JAVA">
<![CDATA["Hello " + <argument> + "!"]]>
        </programlisting>
        <!--para>
        You may download this example project 
        <ulink url="http://www.graniteds.org/confluence/download/attachments/16875661/helloworld.zip?version=1&amp;modificationDate=1245921645000">here</ulink> 
        if you don't want to copy-paste the code in the following sections below.
        </para-->
        <para>
        In order to create, build, and deploy this sample application you need these free tools:
        <itemizedlist>
            <listitem><para>
            <emphasis>Java 6+</emphasis> (6+ working): Download <ulink url="http://java.sun.com/javase/downloads/index.jsp">Sun JDK</ulink> and install it.
            </para></listitem>
            <listitem><para>
            <emphasis>Eclipse 3.5+</emphasis>: Download <ulink url="http://www.eclipse.org/downloads/">Eclipse</ulink> and unzip it somewhere.            
            </para></listitem>
            <listitem><para>
            <emphasis>Tomcat 7+</emphasis>: Download <ulink url="http://tomcat.apache.org/download-70.cgi/">Tomcat</ulink> and unzip it somewhere. For example, 
            <literal>/apache-tomcat-7.0.29</literal> (for Windows users: <literal>C:\apache-tomcat-7.0.29</literal>).
            </para></listitem>
            <listitem><para>
            <emphasis>granite.jar</emphasis>: You may take it from any of the GraniteDS sample applications or from GraniteDS source distribution in the 
            <literal>build</literal> folder. Download it <ulink url="http://www.graniteds.org/confluence/display/DOWNLOAD">here</ulink>.            
            </para></listitem>
            <listitem><para>
            <emphasis>granite-client.jar</emphasis> and <emphasis>granite-java-client.jar</emphasis>: You may take it from any of the GraniteDS sample applications 
            or from GraniteDS source distribution in the <literal>build</literal> folder. Download it <ulink url="http://www.graniteds.org/confluence/display/DOWNLOAD">here</ulink>.            
            </para></listitem>
        </itemizedlist>
        </para>
        <para>
        Creation of the project in Eclipse:
        </para>
        <para>
        Start Eclipse and create a new Java project named <literal>helloworld</literal>. You may just type in <literal>helloworld</literal> for 
        <literal>Project name</literal> and accept all other default settings. 
        </para>
        <para>
        We are now going to create a new POJO service named <literal>HelloWorldService</literal>. Right-click on the <literal>java</literal> source folder 
        and select <emphasis>New / Class</emphasis>, enter <literal>org.test</literal> for <literal>Package</literal> and <literal>HelloWorldService</literal> 
        for <literal>Name</literal> in the following dialog, and then click on the <emphasis>Finish</emphasis> button. In the Java source file editor, modify 
        the code so it is just as follows:
        </para>
        <programlisting role="JAVA">
package org.test;

public class HelloWorldService {

    public String sayHello(String name) {
        return "Hello " + name + "!";
    }
}
        </programlisting>
        <para>
        Next we have to create the GraniteDS configuration file <literal>services-config.xml</literal> and the web application <literal>web.xml</literal> at the root of the project. 
        </para>
        <para>
        Copy and paste the following code into these files:
        </para>
        <programlisting role="XML">
<![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<services-config>

    <services>
        <service
            id="granite-service"
            class="flex.messaging.services.RemotingService"
            messageTypes="flex.messaging.messages.RemotingMessage">
            <destination id="helloWorldService">
                <properties>
                    <scope>application</scope>
                    <source>org.test.HelloWorldService</source>
                </properties>
            </destination>
        </service>
    </services>
</services-config>]]>
        </programlisting>
        <programlisting role="XML">
<![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/j2ee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee
                        http://java.sun.com/xml/ns/j2ee/web-app_2_5.xsd">

    <!-- general information about this web application -->
    <display-name>Hello World</display-name>
    <description>Hello World Sample Application</description>

    <!-- read services-config.xml file at web application startup -->
    <listener>
        <listener-class>org.granite.config.GraniteConfigListener</listener-class>
    </listener>

    <!-- handle AMF requests ([de]serialization) -->
    <filter>
        <filter-name>AMFMessageFilter</filter-name>
        <filter-class>org.granite.messaging.webapp.AMFMessageFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>AMFMessageFilter</filter-name>
        <url-pattern>/graniteamf/*</url-pattern>
    </filter-mapping>

    <!-- handle AMF requests (execution) -->
    <servlet>
        <servlet-name>AMFMessageServlet</servlet-name>
        <servlet-class>org.granite.messaging.webapp.AMFMessageServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>AMFMessageServlet</servlet-name>
        <url-pattern>/graniteamf/*</url-pattern>
    </servlet-mapping>

</web-app>]]>
        </programlisting>
        <para>
        Next we have to build and deploy the server application:
        </para>
        <para>
        Create a folder named <literal>lib</literal> at the root of the project and put <literal>granite.jar</literal> in this folder.
        Create a new file named <literal>build.xml</literal> at the root of the project and copy/paste the following content into it; you may have to modify <literal>TOMCAT_HOME</literal> 
        to reflect your environment:
        </para>
        <programlisting role="XML">
<![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<project name="hello-world" default="deploy">

    <!-- Modify TOMCAT_HOME properties to reflect your environment -->
    <property name="TOMCAT_HOME" value="/apache-tomcat-7.0.29"/>
    
    <!-- Build a war suitable for Tomcat (and other) -->
    <target name="war">
        <mkdir dir="build"/>
        <war destfile="build/helloworld.war" webxml="web.xml">
            <zipfileset file="services-config.xml" prefix="WEB-INF/flex" />
            <lib dir="lib"/>
            <classes dir="bin"/>
        </war>
    </target>

    <!-- Deploy the war in Tomcat -->
    <target name="deploy" depends="war">
        <copy todir="${TOMCAT_HOME}/webapps" file="build/helloworld.war"/>
    </target>

</project>]]>
        </programlisting>
        <para>
        You may now right-click on the <literal>build.xml</literal> file and select <emphasis>Run As / Ant Build</emphasis>. This will launch the build process, 
        create a WAR (Web Archive), and copy it into your Tomcat <literal>webapps</literal> directory.
        </para>
        
        <para>
        Then start Tomcat. Go to the directory <literal>bin</literal> just under your Tomcat installation directory, <literal>/apache-tomcat-7.0.29/bin</literal> 
        for example, and double-click on <literal>startup.bat</literal>, or <literal>startup.sh</literal> for Unix/Mac users. After a short while, you should 
        see in the console that Tomcat has started.
        </para>
        <para>
        You should now see something like the following picture under Eclipse:
        <imagedata align="center" fileref="images/hwservicej.jpg"/>
        </para>
        
        <para>
        Now let create the Java client code, for this example we are simply going to create a command line application but we could use any Java view technology,
        such as Swing, JavaFX or SWT. 
        </para>
        <para>
        Create a new Java project named <literal>helloworld-client</literal>. Create a new class directly in this new folder and name it <literal>HelloWorldClient</literal> 
        in the package <literal>org.test.client</literal> by right-clicking on the <literal>src</literal> folder and selecting <emphasis>New / Class</emphasis>. In the editor, type in the following code:
        </para>
        <programlisting role="JAVA">
<![CDATA[package org.test.client;

import java.net.URI;
import java.util.concurrent.TimeUnit;

import org.granite.client.messaging.RemoteService;
import org.granite.client.messaging.ResultFaultIssuesResponseListener;
import org.granite.client.messaging.channel.amf.AMFRemotingChannel;
import org.granite.client.messaging.events.FaultEvent;
import org.granite.client.messaging.events.IssueEvent;
import org.granite.client.messaging.events.ResultEvent;
import org.granite.client.messaging.transport.apache.ApacheAsyncTransport;

public class HelloWorldClient {

	public static void main(String[] args) throws Exception {
		ApacheAsyncTransport transport = new ApacheAsyncTransport();
		transport.start();
		AMFRemotingChannel channel = new AMFRemotingChannel(transport, 
			"graniteamf", new URI("http://localhost:8080/helloworld/graniteamf/amf.txt"));		
		RemoteService service = new RemoteService(channel, "helloWorldService");
		service.newInvocation("sayHello", args[0]).setTimeToLive(5, TimeUnit.SECONDS)
			.addListener(new ResultFaultIssuesResponseListener() {
			
			@Override
			public void onResult(ResultEvent event) {
				System.out.println("Result: " + event.getResult());
			}
			
			@Override
			public void onFault(FaultEvent event) {
				System.err.println("Fault: " + event.toString());
			}
			
			@Override
			public void onIssue(IssueEvent event) {
				System.err.println("Issue: " + event.toString());
			}
		}).invoke();
	}
}]]>
        </programlisting>
        
        <para>
        You will also need to add a few libraries in a <literal>lib</literal> folder and add them to the build path of the project with <emphasis>Right Click/Build Path/Add to Builder Path</emphasis>:
        <itemizedlist>
        	<listitem><para><literal>httpclient-4.2.1.jar</literal></para></listitem>
        	<listitem><para><literal>httpcore-4.2.1.jar</literal></para></listitem>
        	<listitem><para><literal>httpcore-nio-4.2.1.jar</literal></para></listitem>
        	<listitem><para><literal>httpasyncclient-4.0-beta2-SNAPSHOT.jar</literal></para></listitem>
        	<listitem><para><literal>httpclient-4.2.1.jar</literal></para></listitem>
        	<listitem><para><literal>granite-client.jar</literal></para></listitem>
        	<listitem><para><literal>granite-java-client.jar</literal></para></listitem>
        </itemizedlist>
        </para>
        
        <para>
		You may now run the Java application in Eclipse by right-clicking the class <literal>HelloWorldClient</literal>
        and <emphasis>Run As.../Java Application</emphasis>.        
        The result should appear in the Eclipse console. You can test different results by changing the run arguments in the Eclipse Run configuration for the application.
        </para>
        
        <para>
        Here are some highlights on some parts of the code and configuration:
        </para>
        <programlisting role="JAVA">
public String HelloWorldService.sayHello(String name)
        </programlisting>
        <para>
        The <literal>HelloWorldService</literal> is a simple Java service which declares a method <literal>sayHello()</literal> that takes a <literal>String</literal> argument 
        and returns another <literal>String</literal>.
        </para>
        <programlisting role="XML">
<![CDATA[<destination id="helloWorldService">
    <channel ref="my-graniteamf"/>
    <scope>application</scope>
    <source>org.test.HelloWorldService</source>
</destination>]]>
		</programlisting>
		<para>
		This part of the <literal>services-config.xml</literal> defines a mapping between a destination name and the service class and its scope. This is a basic declaration for an application scoped
		bean that will be created by GraniteDS itself but there are other kinds of configurations that give access to beans managed by an existing container such as Spring, or that use annotations
		to declare the remoting-enabled classes. 
		</para>
        <programlisting role="XML">
<![CDATA[<url-pattern>/graniteamf/*</url-pattern>]]>
		</programlisting>
		<para>
		This part of <literal>web.xml</literal> defines the mapping between the target url and the GraniteDS servlet. Other kinds of configuration are also possible which use a Spring MVC dispatcher
		servlet or use Servlet 3 features to automatically initialize the GraniteDS servlet. <literal>/graniteamf/*</literal> is the default and recommended url mapping for GraniteDS, but any other
		can work.
		</para>
        <programlisting role="JAVA">
ApacheAsyncTransport transport = new ApacheAsyncTransport();
transport.start();
AMFRemotingChannel channel = new AMFRemotingChannel(transport, "my-graniteamf", 
	new URI("http://localhost:8080/helloworld/graniteamf/amf.txt"));
RemoteService srv = new RemoteService(channel, "helloWorldService");
        </programlisting>
        <para>
        This is the initialization part of the GraniteDS Java client. It requires creating a transport (here the default transport based on the Apache asynchronous HTTP client), a remoting channel
        and a <literal>RemoteService</literal> whose target destination matches the destination we declared earlier in the server configuration.
        </para>
        <programlisting role="JAVA">
<![CDATA[srv.newInvocation("sayHello", args[0]).setTimeToLive(5, TimeUnit.SECONDS)
	.addListener(new ResultFaultIssuesResponseListener() {
				
	@Override
	public void onResult(ResultEvent event) {
		System.out.println("Result: " + event.getResult());
	}
	
	@Override
	public void onFault(FaultEvent event) {
		System.err.println("Fault: " + event.toString());
	}
	
	@Override
	public void onIssue(IssueEvent event) {
		System.err.println("Issue: " + event.toString());
	}
}).invoke();]]>
        </programlisting>
        <para>
        This is the main client part where the <literal>RemoteService</literal> triggers a server request that will call the 
        <literal>sayHello()</literal> method with the first argument of the <literal>main</literal> method: 
        <literal>srv.sayHello(args[0])</literal>.
        </para>
        <para>
        The result of this call will be displayed, when available, in the console output in the asynchronous result handler of the remote call.
        </para>
    </section>
    
    <section id="gettingstarted.helloworldrev" condition="flex">
        <title>Hello World, revisited with EJB3</title>
        <para>
        This tutorial shows an evolution of the basic "Hello, world" example application with some Hibernate persistence operations (JPA). When finished and 
        deployed it should look like this picture:
        <imagedata align="center" fileref="images/hw1.jpg"/>
        </para>
        <para>
        In this picture, you see a small data grid that displays the history of all previous say hello operations. This history is persisted in the database 
        by means of a JPA entity bean and those objects are serialized back to the Flex client each time you enter a new name.
        </para>
        <para>
        This example also shows basic usage of the Granite Eclipse Builder and externalization configuration.
        </para>
        <para>
        If you don't want to follow this tutorial step by step you may download it as a zip archive 
        <ulink url="http://www.graniteds.org/confluence/download/attachments/16875663/helloworld2.zip?version=1&amp;modificationDate=1245777729000">here</ulink>.
        </para>
        <para>
        In order to create, build, and deploy this sample application you need these free tools:
        <itemizedlist>
            <listitem><para>
            <emphasis>Java 5+</emphasis> (6+ working): Download <ulink url="http://java.sun.com/javase/downloads/index.jsp">Sun JDK</ulink> and install it.
            </para></listitem>
            <listitem><para>
            <emphasis>Eclipse 3.3+</emphasis>: Download <ulink url="http://www.eclipse.org/downloads/">Eclipse</ulink> and unzip it somewhere.            
            </para></listitem>
            <listitem><para>
            <emphasis>Flex 3 SDK</emphasis>: Download <ulink url="http://www.adobe.com/products/flex/flexdownloads/">Flex 3 SDK</ulink> and unzip it somewhere. 
            For example, <literal>/flex_3_sdk</literal> (for Windows users: <literal>C:\flex_3_sdk</literal>).            
            </para></listitem>
            <listitem><para>
            <emphasis>JBoss 4.2.3.GA</emphasis>: Download <ulink url="http://www.jboss.org/jbossas/downloads/">JBoss</ulink> and unzip it somewhere. For example, 
            <literal>/jboss-4.2.3.GA</literal> (for Windows users: <literal>C:\jboss-4.2.3.GA</literal>).
            </para></listitem>
            <listitem><para>
            <emphasis>granite.jar</emphasis>, <emphasis>granite-hibernate.jar</emphasis> and <emphasis>granite-essentials.swc</emphasis>: You may take it 
            from any of the GraniteDS example applications or from GraniteDS source distribution in the 
            <literal>build</literal> folder. Download it <ulink url="http://www.graniteds.org/confluence/display/DOWNLOAD">here</ulink>.            
            </para></listitem>
            <listitem><para>
            <emphasis>GraniteDS Eclipse Builder</emphasis>: You may download it <ulink url="http://www.graniteds.org/confluence/display/DOWNLOAD">here</ulink> 
            (follow these installation instructions <link linkend="graniteds.gas3">here</link>).
            </para></listitem>
        </itemizedlist>
        </para>
        <para>
        Creation of the project in Eclipse:
        </para>
        <para>
        Start Eclipse and create a new Java project named <literal>helloworld2</literal>. You may just type in <literal>helloworld2</literal> for 
        <literal>Project name</literal> and accept all other default settings. Because we are going to have two types of sources, Java and Flex MXML, it is 
        better to rename the default Java source folder <literal>src</literal> to <literal>java</literal>. You can do this by right-clicking on the 
        <literal>src</literal> source folder and selecting <emphasis>Refactor / Rename</emphasis>.
        </para>
        <para>
        Create a new directory named <literal>lib</literal> at the root of this project and put <literal>granite.jar</literal>, <literal>granite-hibernate.jar</literal> 
        and <literal>granite-essentials.swc</literal> into it. Also add these two JBoss jars: <literal>ejb3-persistence.jar</literal> and 
        <literal>jboss-ejb3x.jar</literal>, which you will find in the <literal>/jboss-4.2.3.GA/server/default/lib</literal> directory. Right-click on those 
        JBoss jars and select <emphasis>Build Path / Add to Build Path</emphasis>.
        </para>
        <para>
        You should now see something like the following picture under Eclipse:
        <imagedata align="center" fileref="images/hw2.jpg"/>
        </para>
        <para>
        Right-click on the <literal>java</literal> source folder, select <emphasis>New / Class</emphasis> and fill the New Java Class dialog as follows:
        <imagedata align="center" fileref="images/hw3.jpg"/>
        </para>
        <para>
        Copy and paste the following code in the Java editor:
        </para>
        <programlisting role="JAVA">
package org.test;

import java.io.Serializable;

import javax.persistence.Basic;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;

@Entity
public class Welcome implements Serializable {

    private static final long serialVersionUID = 1L;

    @Id @GeneratedValue
    private Integer id;

    @Basic
    private String name;

    public Welcome() {
    }

    public Welcome(String name) {
        this.name = name;
    }
    
    public Integer getId() {
        return id;
    }

    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
}
        </programlisting>
        <para>
        This basic JPA entity bean declares a read-only <literal>id</literal> field, auto incremented primary key in the database, and a <literal>name</literal> field, 
        the name of the person that was entered in the Flex application when saying hello.
        </para>
        <para>
        We are now going to create an EJB 3 session bean that will handle the say hello and persistence operations.
        </para>
        <para>
        Create a new Java interface named <literal>HelloWorldService</literal> by right-clicking on the <literal>org.test</literal> package and choosing 
        <emphasis>New / Interface</emphasis>. Then copy and paste the following code:
        </para>
        <programlisting role="JAVA">
<![CDATA[package org.test;

import java.util.List;

public interface HelloWorldService {

    public String sayHello(String name);
    public List<Welcome> findWelcomeHistory();
}]]>
        </programlisting>
        <para>
        Create a new Java class named <literal>HelloWorldServiceBean</literal> that implements the <literal>HelloWorldService</literal> interface by 
        right-clicking on the <literal>org.test</literal> package and choosing <emphasis>New / Class</emphasis>. Then copy and paste the following code:
        </para>
        <programlisting role="JAVA">
<![CDATA[package org.test;

import java.util.List;

import javax.ejb.Local;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

@Stateless
@Local(HelloWorldService.class)
public class HelloWorldServiceBean implements HelloWorldService {

    @PersistenceContext
    protected EntityManager manager;

    @Override
    public String sayHello(String name) {
        manager.persist(new Welcome(name));
        return "Hello " + name + "!";
    }

    @SuppressWarnings("unchecked")
    @Override
    public List<Welcome> findWelcomeHistory() {
        Query query = manager.createQuery("from " + Welcome.class.getName());
        return query.getResultList();
    }
}]]>
        </programlisting>
        <para>
        We now have a complete EJB 3 stateless session bean that will persist each name passed to the <literal>sayHello()</literal> method and return the list 
        of all previous welcome operations with the <literal>findWelcomeHistory()</literal> method.
        </para>
        <para>
        Your Java project should look like that after this step:
        <imagedata align="center" fileref="images/hw5.jpg"/>
        </para>
        
        <para>
        Now let create the Flex client code. Create a new folder named <literal>flex</literal> by right-clicking on the <literal>helloworld2</literal> project 
        and selecting <emphasis>New / Folder</emphasis>. Create a new file directly in this new folder and name it <literal>HelloWorld.mxml</literal> 
        by right-clicking on the <literal>flex</literal> folder and selecting <emphasis>New / File</emphasis>. In the file editor, which may be Flah Builder 
        or a simple text editor depending on your Eclipse installation, type in the following code:
        </para>
        <programlisting role="AS3">
<![CDATA[<?xml version="1.0" encoding="utf-8"?>
<mx:Application
    xmlns:mx="http://www.adobe.com/2006/mxml"
    backgroundGradientColors="[#0e2e7d, #6479ab]"
    layout="vertical"
    verticalAlign="middle"
    creationComplete="srv.findWelcomeHistory()">

    <mx:Style>
        .Panel {
            padding-left: 8px; padding-top: 8px;
            padding-right: 8px; padding-bottom: 8px;
        }
        .Result { font-size: 26px; color: white; }
    </mx:Style>

    <mx:RemoteObject id="srv" destination="helloWorldService" />

    <mx:Panel styleName="Panel" title="Hello World Sample">
        <mx:Label text="Enter your name:"/>
        <mx:TextInput id="nameInput" width="200" />
        <mx:Button label="Say Hello"
           click="srv.sayHello(nameInput.text);srv.findWelcomeHistory()"/>
        
        <mx:Label text="History:"/>
        <mx:DataGrid dataProvider="{srv.findWelcomeHistory.lastResult}"
          width="200" height="200"/>
    </mx:Panel>
        
    <mx:Label styleName="Result" text="{srv.sayHello.lastResult}"/>
    
</mx:Application>]]>
        </programlisting>
        <para>
        Some explanations:
        <itemizedlist>
            <listitem><para>
            This Flex application uses a <literal>RemoteObject</literal> named <literal>srv</literal> that will be bound to the stateless session bean 
            we have created earlier. The actual binding between the destination named <literal>helloWorldService</literal> and the Java service is specified 
            in the <literal>services-config.xml</literal> that we will create later.
            </para></listitem>
            <listitem><para>
            When the Flex application is completely created, see the <literal>creationComplete</literal> event handler, it first calls the 
            <literal>findWelcomeHistory()</literal> method of the Java service. The result of this call is displayed in the <literal>DataGrid</literal>, see 
            the <literal>dataProvider="{srv.findWelcomeHistory.lastResult}"</literal> attribute.
            </para></listitem>
            <listitem><para>
            When you click on the <emphasis>Say Hello</emphasis> button after entering a name in the <literal>TextInput</literal> field, it calls the 
            <literal>sayHello()</literal> method on the server with the supplied name and then the <literal>findWelcomeHistory()</literal> method whose result 
            is used to update the <literal>DataGrid</literal> content. See the <literal>click="srv.sayHello(nameInput.text);srv.findWelcomeHistory()"</literal> 
            attribute. 
            </para></listitem>
            <listitem><para>The returned <literal>String</literal> of the <literal>sayHello()</literal> method, <literal>"Hello " + name + "!"</literal> in the Java 
            service, is displayed in a <literal>Label</literal> just below the <literal>Panel</literal>. See the 
            <literal>text="{srv.sayHello.lastResult}"</literal> attribute.
            </para></listitem>
        </itemizedlist>
        </para>
        <para>
        We are now going to configure the Granite Eclipse Builder that will generate the <literal>Welcome</literal> entity bean ActionScript3 equivalent. 
        First <ulink url="http://www.graniteds.org/confluence/display/DOWNLOAD">download</ulink> the builder and install it; just drop the jar in your Eclipse 
        <literal>plugin</literal> directory and restart. In your package explorer, right-click on the <literal>helloworld2</literal> project and 
        select <emphasis>Add GraniteDS Nature</emphasis>:
        <imagedata align="center" fileref="images/hw6.jpg"/>
        </para>
        <para>
        In the configuration wizard, click on the <emphasis>Add Folder</emphasis> button and select the <literal>java</literal> source folder:
        <imagedata align="center" fileref="images/hw7.jpg"/>
        </para>
        <para>
        Select the <emphasis>Excluded</emphasis> subnode and click on the <emphasis>Edit</emphasis> button. In the following dialog, change the 
        <emphasis>Output Directory</emphasis> to <literal>flex</literal>, instead of the default <literal>as3</literal>, and add the 
        <literal>**/*Service*.java</literal> exclusion pattern, as we don't want code generation for services, just for entities:
        <imagedata align="center" fileref="images/hw8.jpg"/>
        </para>
        <para>
        After those short configuration steps, you may accept all other default options and click directly on the <emphasis>Finish</emphasis> button in the wizard. 
        The generation process starts and produces two files as shown in the following picture:
        <imagedata align="center" fileref="images/hw9.jpg"/>
        </para>
        <para>
        There is no need to modify those files for our short example but, if you want to add specific methods to your ActionScript 3 bean, you must put it in the 
        <literal>Welcome.as</literal> class and not in the <literal>WelcomeBase.as</literal> class that may be overwritten by subsequent generation processes. 
        If you look at the <literal>WelcomeBase.as</literal> class, you will see that the generated code reproduces the <literal>Welcome.java</literal> fields and 
        accesses (read-only <literal>id</literal> and read-write <literal>name</literal>). It also implements the code required for externalization mechanisms 
        with lazy loading support. See <link linkend="remoting.externalization">Externalizers</link> documentation for details.
        </para>

        <para>
        The rest is only a matter of configuration files. First, create a new file named <literal>granite-config.xml</literal> at the root of the 
        <literal>helloworld2</literal> project directory with this content:        
        </para>
        <programlisting role="XML">
<![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE granite-config PUBLIC "-//Granite Data Services//DTD granite-config internal//EN"
    "http://www.graniteds.org/public/dtd/3.0.0/granite-config.dtd">

<granite-config>

    <class-getter type="org.granite.hibernate.HibernateClassGetter"/>

    <externalizers>
        <externalizer type="org.granite.hibernate.HibernateExternalizer">
            <include annotated-with="javax.persistence.Entity"/>
        </externalizer>
    </externalizers>

</granite-config>]]>
        </programlisting>
        <para>
        This configuration instructs GDS to externalize all Java classes annotated with the <literal>@Entity</literal> annotation (such as our 
        <literal>Welcome.java</literal> entity bean).
        </para>
        <para>
        Next we need a Flex <literal>services-config.xml</literal> as follows. Create it in at root of the project, as for <literal>granite-config.xml</literal>:
        </para>
        <programlisting role="XML">
<![CDATA[<?xml version="1.0" encoding="UTF-8"?>

<services-config>

    <services>
        <service
            id="granite-service"
            class="flex.messaging.services.RemotingService"
            messageTypes="flex.messaging.messages.RemotingMessage">
            <destination id="helloWorldService">
                <channels>
                    <channel ref="my-graniteamf"/>
                </channels>
                <properties>
                    <factory>ejbFactory</factory>
                </properties>
            </destination>
        </service>
    </services>
    
    <factories>
        <factory id="ejbFactory" class="org.granite.messaging.service.EjbServiceFactory">
            <properties>
                <lookup>helloworld/{capitalized.destination.id}Bean/local</lookup>
            </properties>
        </factory>
    </factories>

    <channels>
        <channel-definition id="my-graniteamf" class="mx.messaging.channels.AMFChannel">
            <endpoint
                uri="http://{server.name}:{server.port}/{context.root}/graniteamf/amf"
                class="flex.messaging.endpoints.AMFEndpoint"/>
        </channel-definition>
    </channels>

</services-config>]]>
        </programlisting>
        <para>
        This is where the destination id <literal>HelloWorldService</literal> is bound to our stateless EJB 3 session bean service. When the 
        <literal>RemoteObject</literal> in <literal>HelloWorld.mxml</literal> is called, the destination id is used in the <literal>EjbServiceFactory</literal> 
        to lookup the EJB; <literal>helloworld/{capitalized.destination.id}Bean/local</literal> is resolved to 
        <literal>helloworld/HelloWorldServiceBean/local</literal>, that is the JNDI name used in JBoss to access the EJB.
        </para>
        <para>
        We then need three additional configuration files: <literal>application.xml</literal>, <literal>persistence.xml</literal> and <literal>web.xml</literal>. 
        All are standard J2EE configuration files and you will find detailed documentation on them on the Internet. Here is their contents. 
        Again, create them at the root of the project:
        </para>
        
        <programlisting role="XML">
<![CDATA[<?xml version="1.0" encoding="UTF-8"?>

<application>
    <display-name>GraniteDS HelloWorld</display-name>
    <module>
        <web>
            <web-uri>helloworld.war</web-uri>
            <context-root>/helloworld</context-root>
        </web>
    </module>
    <module>
        <ejb>helloworld.jar</ejb>
    </module>
</application>]]>
        </programlisting>
        <programlisting role="XML">
<![CDATA[<?xml version="1.0" encoding="UTF-8"?>

<persistence>
    <persistence-unit name="ejb3">
        <jta-data-source>java:/DefaultDS</jta-data-source>
        <properties>
            <property name="hibernate.hbm2ddl.auto" value="update"/>
        </properties>
    </persistence-unit>
</persistence>]]>
        </programlisting>
        <programlisting role="XML">
<![CDATA[<?xml version="1.0" encoding="UTF-8"?>

<web-app version="2.4" xmlns="http://java.sun.com/xml/ns/j2ee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee
                        http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">

    <!-- general information about this web application -->
    <display-name>Hello World</display-name>
    <description>Hello World Sample Application</description>

    <!-- read services-config.xml file at web application startup -->
    <listener>
        <listener-class>org.granite.config.GraniteConfigListener</listener-class>
    </listener>

    <!-- handle AMF requests ([de]serialization) -->
    <filter>
        <filter-name>AMFMessageFilter</filter-name>
        <filter-class>org.granite.messaging.webapp.AMFMessageFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>AMFMessageFilter</filter-name>
        <url-pattern>/graniteamf/*</url-pattern>
    </filter-mapping>

    <!-- handle AMF requests (execution) -->
    <servlet>
        <servlet-name>AMFMessageServlet</servlet-name>
        <servlet-class>org.granite.messaging.webapp.AMFMessageServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>AMFMessageServlet</servlet-name>
        <url-pattern>/graniteamf/*</url-pattern>
    </servlet-mapping>

    <!-- default content for helloworld application -->
    <welcome-file-list>
        <welcome-file>HelloWorld.swf</welcome-file>
    </welcome-file-list>

</web-app>]]>
        </programlisting>
        
        <para>
        You should now see something like this in your package explorer:
        <imagedata align="center" fileref="images/hw10.jpg"/>
        </para>
        
        <para>
        The last thing to do is to build and deploy the application.
        </para>
        <para>
        Create a new file named <literal>build.xml</literal> at the root of the project. Copy and paste the following content into it; you may have to modify 
        the properties <literal>FLEX_HOME</literal> and <literal>TOMCAT_HOME</literal> to reflect your environment:
        </para>
        <programlisting role="XML">
<![CDATA[<?xml version="1.0" encoding="UTF-8"?>

<project name="hello-world" default="deploy">

    <!-- Modify FLEX_HOME/JBOSS_HOME properties to reflect your environment -->
    <property name="FLEX_HOME" value="/flex_sdk_3"/>
    <property name="JBOSS_HOME" value="/jboss-4.2.3.GA"/>
    
    <!-- Declare Flex Ant tasks (such as mxmlc used below) -->
    <taskdef resource="flexTasks.tasks" classpath="${FLEX_HOME}/ant/lib/flexTasks.jar" />

    <!-- Compile MXML source code to SWF -->
    <target name="mxmlc">
        <mxmlc
            file="flex/HelloWorld.mxml"
            output="build/HelloWorld.swf"
            services="services-config.xml"
            context-root="helloworld">
            
            <source-path path-element="flex" />

            <!-- Make sure that the Welcome.as class is compiled into
                 our HelloWorld.swf (otherwise mxmlc doesn't include it
                 because there are no explicit reference to this class
                 in HelloWorld.mxml -->
            <includes symbol="org.test.Welcome" />
            
            <!-- Make sure that all "essentials" GDS classes are included into
                 our HelloWorld.swf (otherwise mxmlc doesn't include them
                 because there is no explicit reference to these classes
                 in HelloWorld.mxml and Welcome.as -->
            <compiler.include-libraries dir="lib" append="true">
                <include name="granite-essentials.swc" />
            </compiler.include-libraries>
        </mxmlc>
    </target>

    <!-- Build an ear suitable for JBoss -->
    <target name="ear" depends="mxmlc">
        <mkdir dir="build"/>
        <jar destfile="build/helloworld.jar">
            <fileset dir="bin" includes="**/*.class"/>
            <zipfileset file="persistence.xml" prefix="META-INF" />
        </jar>
        <war destfile="build/helloworld.war" webxml="web.xml">
            <zipfileset file="services-config.xml" prefix="WEB-INF/flex" />
            <zipfileset file="granite-config.xml" prefix="WEB-INF/granite" />
            <fileset dir="build" includes="*.swf"/>
        </war>
        <ear destfile="build/helloworld.ear" appxml="application.xml">
            <fileset dir="build" includes="*.jar,*.war"/>
            <zipfileset dir="lib" includes="granite*.jar" prefix="lib" />
        </ear>
    </target>

    <!-- Deploy the ear in JBoss -->
    <target name="deploy" depends="ear">
        <copy todir="${JBOSS_HOME}/server/default/deploy" file="build/helloworld.ear"/>
    </target>

</project>]]>
        </programlisting>
        <para>
        Basically, this Ant build compiles our Flex code in a swf and package everything in an ear suitable for JBoss deployment.
        </para>
        <warning><para>
        <emphasis>Read the comments in the above <literal>build.xml</literal></emphasis> about including AS3 classes/SWC libraries into the compiled SWF! 
        Missing this point leads to a very common <emphasis>Flex runtime error</emphasis> because of unexpected mxmlc compiler optimizations!
        </para></warning>
        <para>
        You may now right-click on the <literal>build.xml</literal> file and select <emphasis>Run As / Ant Build</emphasis>. This will launch the build process, 
        compile the MXML code to an SWF, create an ear (Enterprise ARchive) and copy it into your JBoss <literal>deploy</literal> directory.
        </para>
        
        <para>
        Finally start JBoss and test the application.
        To start JBoss, go to the directory <literal>bin</literal> just under your JBoss installation directory, <literal>/jboss-4.2.3.GA/bin</literal> 
        for example, and double-click on <literal>run.bat</literal>, or <literal>run.sh</literal> for Unix/Mac users. After a short while, you should 
        see in the console that JBoss has started. You may now point your Web browser to 
        <ulink url="http://localhost:8080/helloworld/"><literal>http://localhost:8080/helloworld/</literal></ulink>.
        </para>
    </section>
    
</chapter>
